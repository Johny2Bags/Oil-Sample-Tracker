<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Transformer Oil Test Tracker</title>
    <!-- Tailwind CSS CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Inter Font -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f0f4f8; /* Light blue-gray background */
            color: #2d3748; /* Dark text */
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }
        .container {
            background-color: #ffffff;
            border-radius: 12px;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
            padding: 24px;
            margin: 24px auto;
            max-width: 1200px;
            width: 95%;
            flex-grow: 1;
            display: flex;
            flex-direction: column;
        }
        h1, h2, h3 {
            color: #2b6cb0; /* Darker blue for headings */
            font-weight: 700;
            margin-bottom: 16px;
        }
        .form-group {
            margin-bottom: 1rem;
        }
        label {
            display: block;
            font-weight: 600;
            margin-bottom: 0.5rem;
            color: #4a5568;
        }
        input[type="text"],
        input[type="number"],
        input[type="date"],
        select,
        textarea {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid #cbd5e0; /* Light gray border */
            border-radius: 8px;
            background-color: #edf2f7; /* Lighter gray background */
            transition: border-color 0.2s, box-shadow 0.2s;
        }
        input[type="text"]:focus,
        input[type="number"]:focus,
        input[type="date"]:focus,
        select:focus,
        textarea:focus {
            border-color: #4299e1; /* Blue focus border */
            box-shadow: 0 0 0 3px rgba(66, 153, 225, 0.5); /* Blue glow on focus */
            outline: none;
        }
        button {
            background-color: #4299e1; /* Blue button */
            color: white;
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 1rem;
            font-weight: 600;
            transition: background-color 0.2s, transform 0.1s;
        }
        button:hover {
            background-color: #3182ce; /* Darker blue on hover */
            transform: translateY(-1px);
        }
        button:active {
            transform: translateY(0);
        }
        .btn-secondary {
            background-color: #a0aec0; /* Gray button */
        }
        .btn-secondary:hover {
            background-color: #718096; /* Darker gray on hover */
        }
        .modal {
            display: none; /* Hidden by default */
            position: fixed; /* Stay in place */
            z-index: 1000; /* Sit on top */
            left: 0;
            top: 0;
            width: 100%; /* Full width */
            height: 100%; /* Full height */
            overflow: auto; /* Enable scroll if needed */
            background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
            justify-content: center;
            align-items: center;
        }
        .modal-content {
            background-color: #fefefe;
            margin: auto;
            padding: 20px;
            border-radius: 12px;
            width: 90%;
            max-width: 800px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.3);
            position: relative;
            max-height: 90vh; /* Limit height for scrollability */
            overflow-y: auto; /* Enable scrolling within modal */
        }
        .close-button {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            position: absolute;
            top: 10px;
            right: 20px;
        }
        .close-button:hover,
        .close-button:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }
        .message-box {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: #48bb78; /* Green for success */
            color: white;
            padding: 15px 25px;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
            z-index: 1001;
            text-align: center;
            font-weight: 600;
        }
        .message-box.error {
            background-color: #e53e3e; /* Red for error */
        }
        .data-list-item {
            background-color: #edf2f7;
            padding: 12px 16px;
            border-radius: 8px;
            margin-bottom: 8px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap; /* Allow wrapping on smaller screens */
        }
        .data-list-item span {
            font-size: 0.95rem;
            color: #2d3748;
            margin-right: 15px;
        }
        .data-list-item button {
            padding: 6px 12px;
            font-size: 0.85rem;
            margin-left: 10px;
        }
        .data-list-item .date {
            font-weight: 600;
            color: #2b6cb0;
        }
        .user-id-display {
            font-size: 0.8rem;
            color: #718096;
            margin-top: 10px;
            word-break: break-all; /* Ensure long IDs wrap */
        }
        canvas {
            display: block;
            background-color: #f7fafc;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            margin-top: 20px;
            max-width: 100%; /* Ensure canvas scales */
            height: 400px; /* Fixed height for consistency, adjust as needed */
        }
        .graph-controls {
            margin-top: 20px;
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            align-items: center;
        }
        .graph-controls select {
            flex: 1;
            min-width: 150px;
        }
        .search-controls {
            margin-bottom: 20px;
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            align-items: center;
        }
        .search-controls input {
            flex: 1;
            min-width: 200px;
        }
        /* Mobile adjustments */
        @media (max-width: 768px) {
            .container {
                margin: 16px auto;
                padding: 16px;
            }
            .form-group {
                flex-direction: column;
                align-items: flex-start;
            }
            .form-group label {
                width: 100%;
            }
            .form-group input, .form-group select {
                width: 100%;
            }
            .dga-grid {
                grid-template-columns: 1fr; /* Stack DGA inputs on small screens */
            }
            .data-list-item {
                flex-direction: column;
                align-items: flex-start;
            }
            .data-list-item span {
                margin-bottom: 5px;
            }
            .data-list-item button {
                margin-left: 0;
                margin-top: 10px;
                width: 100%;
            }
            .search-controls {
                flex-direction: column;
                align-items: stretch;
            }
            .search-controls input, .search-controls button {
                width: 100%;
            }
        }
    </style>
</head>
<body class="flex flex-col min-h-screen">
    <div class="container">
        <h1 class="text-3xl mb-4 text-center">Transformer Oil Test Tracker</h1>

        <div class="flex flex-wrap gap-4 mb-6 justify-center">
            <button id="newEntryBtn" class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-lg shadow-md">
                + New Test Entry
            </button>
            <button id="viewDataBtn" class="bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded-lg shadow-md">
                View All Data
            </button>
        </div>

        <div id="loadingIndicator" class="hidden text-center text-blue-600 font-semibold">
            Loading...
        </div>
        <div id="userIdDisplay" class="user-id-display text-center mb-4"></div>

        <!-- Graph Section -->
        <h2 class="text-2xl mt-8 mb-4">Trend Analysis</h2>
        <div class="graph-controls">
            <label for="graphParamSelect" class="block text-gray-700 font-bold mb-0">Select Parameter:</label>
            <select id="graphParamSelect" class="p-2 border rounded-lg bg-gray-100">
                <option value="dielectricStrength">Dielectric Strength (MV/m)</option>
                <option value="acidity">Acidity (mg KOH/g)</option>
                <option value="waterContent">Water Content (mg/kg)</option>
                <option value="hydrogen">Hydrogen (ppm)</option>
                <option value="methane">Methane (ppm)</option>
                <option value="ethane">Ethane (ppm)</option>
                <option value="ethylene">Ethylene (ppm)</option>
                <option value="acetylene">Acetylene (ppm)</option>
                <option value="carbonMonoxide">Carbon Monoxide ($CO$)</option>
                <option value="carbonDioxide">Carbon Dioxide ($CO_2$)</option>
                <option value="oxygen">Oxygen ($O_2$)</option>
                <option value="nitrogen">Nitrogen ($N_2$)</option>
                <option value="totalDissolvedGas">Total Dissolved Gas (ppm)</option>
                <!-- Add more parameters here if needed -->
            </select>
            <button id="downloadGraphBtn" class="bg-purple-500 hover:bg-purple-600 text-white font-bold py-2 px-4 rounded-lg shadow-md">
                Download Graph
            </button>
        </div>
        <canvas id="oilTrendChart"></canvas>

        <!-- Data List Section -->
        <h2 class="text-2xl mt-8 mb-4">All Test Entries</h2>
        <div class="search-controls">
            <input type="text" id="searchDataInput" placeholder="Search by Asset No, Date, or Type..." class="rounded-lg">
            <button id="clearSearchBtn" class="bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded-lg shadow-md">
                Clear Search
            </button>
        </div>
        <div id="dataList" class="space-y-3">
            <!-- Data entries will be loaded here -->
            <p class="text-center text-gray-500" id="noDataMessage">No test data available yet. Add a new entry!</p>
        </div>

        <!-- The Modal for Data Entry -->
        <div id="dataEntryModal" class="modal">
            <div class="modal-content">
                <span class="close-button">&times;</span>
                <h2 class="text-2xl mb-4">New Test Entry</h2>
                <form id="oilTestForm" class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <!-- General Information -->
                    <div class="md:col-span-2 text-lg font-semibold text-blue-700">General Information</div>
                    <div class="form-group">
                        <label for="dateOfSample">Date of Sample:</label>
                        <input type="date" id="dateOfSample" name="dateOfSample" required class="rounded-lg">
                    </div>
                    <div class="form-group">
                        <label for="dateOfTest">Date of Test:</label>
                        <input type="date" id="dateOfTest" name="dateOfTest" required class="rounded-lg">
                    </div>
                    <div class="form-group">
                        <label for="assetNo">Asset No:</label>
                        <input type="text" id="assetNo" name="assetNo" placeholder="e.g., 359897" class="rounded-lg">
                    </div>
                    <div class="form-group">
                        <label for="serialNo">Serial No:</label>
                        <input type="text" id="serialNo" name="serialNo" placeholder="e.g., 119,707" class="rounded-lg">
                    </div>
                    <div class="form-group">
                        <label for="make">Make:</label>
                        <input type="text" id="make" name="make" placeholder="e.g., Newton" class="rounded-lg">
                    </div>
                    <div class="form-group">
                        <label for="type">Type:</label>
                        <input type="text" id="type" name="type" placeholder="e.g., Transformer" class="rounded-lg">
                    </div>
                    <div class="form-group">
                        <label for="volume">Volume (Litres):</label>
                        <input type="number" id="volume" name="volume" step="any" placeholder="e.g., 2111" class="rounded-lg">
                    </div>
                    <div class="form-group">
                        <label for="testID">Test ID:</label>
                        <input type="text" id="testID" name="testID" placeholder="e.g., MIDEL 7131" class="rounded-lg">
                    </div>
                    <div class="form-group">
                        <label for="samplePoint">Sample Point:</label>
                        <input type="text" id="samplePoint" name="samplePoint" placeholder="e.g., Bottom of main tank" class="rounded-lg">
                    </div>
                    <div class="form-group">
                        <label for="kVADating">KVA Rating:</label>
                        <input type="number" id="kVADating" name="kVADating" placeholder="e.g., 1000" class="rounded-lg">
                    </div>

                    <!-- Physical and Chemical Tests -->
                    <div class="md:col-span-2 text-lg font-semibold text-blue-700 mt-6">Physical and Chemical Tests</div>
                    <div class="form-group">
                        <label for="compound">Compound:</label>
                        <select id="compound" name="compound" class="rounded-lg">
                            <option value="Satisfactory">Satisfactory</option>
                            <option value="Unsatisfactory">Unsatisfactory</option>
                            <option value="Action Required">Action Required</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="sediment">Sediment:</label>
                        <select id="sediment" name="sediment" class="rounded-lg">
                            <option value="Satisfactory">Satisfatory</option>
                            <option value="Unsatisfactory">Unsatisfactory</option>
                            <option value="Action Required">Action Required</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="oilLevel">Oil Level:</label>
                        <select id="oilLevel" name="oilLevel" class="rounded-lg">
                            <option value="Satisfactory">Satisfactory</option>
                            <option value="Unsatisfactory">Unsatisfactory</option>
                            <option value="Action Required">Action Required</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="paint">Paint:</label>
                        <select id="paint" name="paint" class="rounded-lg">
                            <option value="Satisfactory">Satisfactory</option>
                            <option value="Unsatisfactory">Unsatisfactory</option>
                            <option value="Action Required">Action Required</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="breather">Breather:</label>
                        <select id="breather" name="breather" class="rounded-lg">
                            <option value="Satisfactory">Satisfactory</option>
                            <option value="Unsatisfactory">Unsatisfactory</option>
                            <option value="Action Required">Action Required</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="dielectricStrength">Dielectric Strength (MV/m):</label>
                        <input type="number" id="dielectricStrength" name="dielectricStrength" step="any" placeholder="e.g., 0.09" class="rounded-lg">
                    </div>
                    <div class="form-group">
                        <label for="acidity">Acidity (mg KOH/g):</label>
                        <input type="number" id="acidity" name="acidity" step="any" placeholder="e.g., 0.04" class="rounded-lg">
                    </div>
                    <div class="form-group">
                        <label for="waterContent">Water Content (mg/kg):</label>
                        <input type="number" id="waterContent" name="waterContent" step="any" placeholder="e.g., 94" class="rounded-lg">
                    </div>
                    <div class="form-group">
                        <label for="colour">Colour:</label>
                        <input type="text" id="colour" name="colour" placeholder="e.g., Light yellow (1)" class="rounded-lg">
                    </div>
                    <div class="form-group">
                        <label for="appearance">Appearance:</label>
                        <input type="text" id="appearance" name="appearance" placeholder="e.g., Typical" class="rounded-lg">
                    </div>
                    <div class="form-group">
                        <label for="odour">Odour:</label>
                        <input type="text" id="odour" name="odour" placeholder="e.g., Typical" class="rounded-lg">
                    </div>
                    <div class="form-group">
                        <label for="fibres">Fibres:</label>
                        <input type="text" id="fibres" name="fibres" placeholder="e.g., Fine" class="rounded-lg">
                    </div>
                    <div class="form-group">
                        <label for="turbidity">Turbidity:</label>
                        <input type="text" id="turbidity" name="turbidity" placeholder="e.g., Paint trace" class="rounded-lg">
                    </div>

                    <!-- Dissolved Gas Analysis (DGA) -->
                    <div class="md:col-span-2 text-lg font-semibold text-blue-700 mt-6">Dissolved Gas Analysis (DGA) - ppm</div>
                    <div class="form-group">
                        <label for="hydrogen">Hydrogen ($H_2$):</label>
                        <input type="number" id="hydrogen" name="hydrogen" step="any" placeholder="e.g., 0" class="rounded-lg">
                    </div>
                    <div class="form-group">
                        <label for="methane">Methane ($CH_4$):</label>
                        <input type="number" id="methane" name="methane" step="any" placeholder="e.g., 2" class="rounded-lg">
                    </div>
                    <div class="form-group">
                        <label for="ethane">Ethane ($C_2H_6$):</label>
                        <input type="number" id="ethane" name="ethane" step="any" placeholder="e.g., 6" class="rounded-lg">
                    </div>
                    <div class="form-group">
                        <label for="ethylene">Ethylene ($C_2H_4$):</label>
                        <input type="number" id="ethylene" name="ethylene" step="any" placeholder="e.g., 175" class="rounded-lg">
                    </div>
                    <div class="form-group">
                        <label for="acetylene">Acetylene ($C_2H_2$):</label>
                        <input type="number" id="acetylene" name="acetylene" step="any" placeholder="e.g., 382" class="rounded-lg">
                    </div>
                    <div class="form-group">
                        <label for="carbonMonoxide">Carbon Monoxide ($CO$):</label>
                        <input type="number" id="carbonMonoxide" name="carbonMonoxide" step="any" placeholder="e.g., 0" class="rounded-lg">
                    </div>
                    <div class="form-group">
                        <label for="carbonDioxide">Carbon Dioxide ($CO_2$):</label>
                        <input type="number" id="carbonDioxide" name="carbonDioxide" step="any" placeholder="e.g., 6" class="rounded-lg">
                    </div>
                    <div class="form-group">
                        <label for="oxygen">Oxygen ($O_2$):</label>
                        <input type="number" id="oxygen" name="oxygen" step="any" placeholder="e.g., 119707" class="rounded-lg">
                    </div>
                    <div class="form-group">
                        <label for="nitrogen">Nitrogen ($N_2$):</label>
                        <input type="number" id="nitrogen" name="nitrogen" step="any" placeholder="e.g., 244" class="rounded-lg">
                    </div>
                    <div class="form-group">
                        <label for="totalDissolvedGas">Total Dissolved Gas:</label>
                        <input type="number" id="totalDissolvedGas" name="totalDissolvedGas" step="any" placeholder="e.g., 164159" class="rounded-lg">
                    </div>

                    <!-- Furan Analysis -->
                    <div class="md:col-span-2 text-lg font-semibold text-blue-700 mt-6">Furan Analysis</div>
                    <div class="form-group">
                        <label for="furanolMethylKetone">2-Furanol (methyl-ketone):</label>
                        <input type="number" id="furanolMethylKetone" name="furanolMethylKetone" step="any" placeholder="e.g., 0.020" class="rounded-lg">
                    </div>
                    <div class="form-group">
                        <label for="furfuraldehyde">2-Furfuraldehyde:</label>
                        <input type="number" id="furfuraldehyde" name="furfuraldehyde" step="any" class="rounded-lg">
                    </div>
                    <div class="form-group">
                        <label for="acetylfuran">2-Acetylfuran:</label>
                        <input type="number" id="acetylfuran" name="acetylfuran" step="any" class="rounded-lg">
                    </div>
                    <div class="form-group">
                        <label for="furanolAlcohol">2-Furanol (furanyl-alcohol):</label>
                        <input type="number" id="furanolAlcohol" name="furanolAlcohol" step="any" class="rounded-lg">
                    </div>
                    <div class="form-group">
                        <label for="hydroxymethylFurfuraldehyde">5-Hydroxymethylfurfuraldehyde:</label>
                        <input type="number" id="hydroxymethylFurfuraldehyde" name="hydroxymethylFurfuraldehyde" step="any" class="rounded-lg">
                    </div>

                    <!-- PCB Analysis -->
                    <div class="md:col-span-2 text-lg font-semibold text-blue-700 mt-6">PCB Analysis</div>
                    <div class="form-group">
                        <label for="pcbsResult">Polychlorinated biphenyl (PCB):</label>
                        <input type="text" id="pcbsResult" name="pcbsResult" placeholder="e.g., PCBs not analysed." class="rounded-lg">
                    </div>

                    <!-- Recommendations -->
                    <div class="md:col-span-2 text-lg font-semibold text-blue-700 mt-6">Recommendations</div>
                    <div class="form-group md:col-span-2">
                        <label for="recommendations">Recommendations:</label>
                        <textarea id="recommendations" name="recommendations" rows="3" placeholder="e.g., Resample to confirm and measure gas progression." class="rounded-lg"></textarea>
                    </div>
                    <div class="form-group">
                        <label for="dateOfNextSample">Date of Next Sample:</label>
                        <input type="text" id="dateOfNextSample" name="dateOfNextSample" placeholder="e.g., In 3 months" class="rounded-lg">
                    </div>

                    <div class="md:col-span-2 flex justify-end gap-4 mt-6">
                        <button type="submit" class="bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded-lg shadow-md">
                            Save Data
                        </button>
                        <button type="button" id="cancelEntryBtn" class="btn-secondary hover:bg-gray-700 text-white font-bold py-2 px-4 rounded-lg shadow-md">
                            Cancel
                        </button>
                    </div>
                </form>
            </div>
        </div>

        <!-- Custom Message Box -->
        <div id="messageBox" class="message-box"></div>

    </div>

    <!-- Firebase SDKs -->
    <script type="module">
        // Import the functions you need from the SDKs you need
        // Updated Firebase SDK version to 12.0.0 as provided by the user
        import { initializeApp } from "https://www.gstatic.com/firebasejs/12.0.0/firebase-app.js";
        import { getAnalytics } from "https://www.gstatic.com/firebasejs/12.0.0/firebase-analytics.js";
        import { getAuth, signInAnonymously, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/12.0.0/firebase-auth.js";
        import { getFirestore, collection, addDoc, onSnapshot, query, doc, deleteDoc } from "https://www.gstatic.com/firebasejs/12.0.0/firebase-firestore.js";

        // Global Firebase variables
        let app;
        let db;
        let auth;
        let analytics;
        let userId = 'anonymous'; // Default to anonymous

        // UI Elements
        const newEntryBtn = document.getElementById('newEntryBtn');
        const viewDataBtn = document.getElementById('viewDataBtn');
        const dataEntryModal = document.getElementById('dataEntryModal');
        const closeButton = dataEntryModal.querySelector('.close-button');
        const cancelEntryBtn = document.getElementById('cancelEntryBtn');
        const oilTestForm = document.getElementById('oilTestForm');
        const dataList = document.getElementById('dataList');
        const noDataMessage = document.getElementById('noDataMessage');
        const loadingIndicator = document.getElementById('loadingIndicator');
        const userIdDisplay = document.getElementById('userIdDisplay');
        const messageBox = document.getElementById('messageBox');
        const graphParamSelect = document.getElementById('graphParamSelect');
        const oilTrendChartCanvas = document.getElementById('oilTrendChart');
        const ctx = oilTrendChartCanvas.getContext('2d');
        const downloadGraphBtn = document.getElementById('downloadGraphBtn');
        const searchDataInput = document.getElementById('searchDataInput');
        const clearSearchBtn = document.getElementById('clearSearchBtn');

        let allTestData = []; // To store all fetched data for graphing

        // --- Firebase Initialization and Authentication ---
        // Your web app's Firebase configuration - PROVIDED BY USER
        const firebaseConfig = {
            apiKey: "AIzaSyCM_uA1J892sYrC0vVGmSaU2gn_8VNeciI",
            authDomain: "oil-sample-tracker.firebaseapp.com",
            projectId: "oil-sample-tracker",
            storageBucket: "oil-sample-tracker.firebasestorage.app",
            messagingSenderId: "271202062311",
            appId: "1:271202062311:web:da9e75f80892d747e5b742",
            measurementId: "G-96X1R1G85W"
        };

        /**
         * IMPORTANT FIREBASE SECURITY RULES FOR THIS APP:
         *
         * To allow authenticated users (including anonymous ones) to read and write their own data,
         * you MUST set up the following rules in your Firebase Firestore console:
         *
         * 1. Go to your Firebase project console: https://console.firebase.google.com/
         * 2. Navigate to "Firestore Database" -> "Rules" tab.
         * 3. Replace the existing rules with the following:
         *
         * rules_version = '2';
         * service cloud.firestore {
         * match /databases/{database}/documents {
         * // Allow authenticated users to read and write to their own data
         * // stored under artifacts/{projectId}/users/{userId}/transformer_oil_tests
         * match /artifacts/{projectId}/users/{userId}/transformer_oil_tests/{document=**} {
         * allow read, write: if request.auth != null && request.auth.uid == userId;
         * }
         * }
         * }
         *
         * This rule ensures that:
         * - Only authenticated users can access the data.
         * - Users can only read and write to documents within their specific `userId` path.
         * - The `projectId` in the path dynamically matches your Firebase project ID.
         *
         * After updating the rules, remember to "Publish" them.
         */


        /**
         * Displays a custom message box.
         * @param {string} message - The message to display.
         * @param {boolean} isError - True if it's an error message, false for success.
         */
        function showMessageBox(message, isError = false) {
            messageBox.textContent = message;
            messageBox.className = 'message-box'; // Reset classes
            if (isError) {
                messageBox.classList.add('error');
            }
            messageBox.style.display = 'block';
            setTimeout(() => {
                messageBox.style.display = 'none';
            }, 3000); // Hide after 3 seconds
        }

        /**
         * Initializes Firebase app and authentication.
         */
        async function initializeFirebase() {
            try {
                // Initialize Firebase
                app = initializeApp(firebaseConfig);
                db = getFirestore(app);
                auth = getAuth(app);
                analytics = getAnalytics(app); // Initialize analytics

                // Authenticate user anonymously
                await signInAnonymously(auth);
                console.log("Signed in anonymously.");

                // Listen for auth state changes and set userId
                onAuthStateChanged(auth, (user) => {
                    if (user) {
                        userId = user.uid;
                        userIdDisplay.textContent = `User ID: ${userId}`;
                        console.log("Auth state changed. User ID:", userId);
                        setupFirestoreListener(); // Start listening to data once authenticated
                    } else {
                        // This case should ideally not be hit if signInAnonymously succeeds,
                        // but provides a fallback for userId if auth state is somehow lost.
                        userId = crypto.randomUUID(); // Fallback for unauthenticated/anonymous
                        userIdDisplay.textContent = `User ID: ${userId} (Anonymous)`;
                        console.log("User is signed out or anonymous. Using random ID:", userId);
                        setupFirestoreListener(); // Still try to listen, but data will be under anonymous ID
                    }
                });

            } catch (error) {
                console.error("Error initializing Firebase:", error);
                showMessageBox(`Failed to initialize Firebase: ${error.message}`, true);
            }
        }

        // --- Firestore Data Operations ---

        /**
         * Sets up a real-time listener for transformer oil test data.
         */
        function setupFirestoreListener() {
            if (!db || !userId) {
                console.warn("Firestore or User ID not ready for listener setup.");
                return;
            }

            loadingIndicator.classList.remove('hidden');
            // Use the projectId from your firebaseConfig for the collection path
            // This ensures data is stored under your specific project's ID in Firestore.
            const colRef = collection(db, `artifacts/${firebaseConfig.projectId}/users/${userId}/transformer_oil_tests`);
            const q = query(colRef); // No orderBy to avoid index issues

            onSnapshot(q, (snapshot) => {
                allTestData = [];
                snapshot.forEach((doc) => {
                    const data = doc.data();
                    // Ensure dateOfTest is a string for consistent sorting and parsing
                    if (data.dateOfTest) {
                        allTestData.push({ id: doc.id, ...data });
                    } else {
                        console.warn("Document missing dateOfTest, skipping:", doc.id);
                    }
                });

                // Sort data by dateOfTest in ascending order for graphing
                allTestData.sort((a, b) => {
                    const dateA = new Date(a.dateOfTest);
                    const dateB = new Date(b.dateOfTest);
                    return dateA - dateB;
                });

                // Display all data initially, then apply search filter if present
                filterAndDisplayData();
                drawChart(allTestData, graphParamSelect.value);
                loadingIndicator.classList.add('hidden');
            }, (error) => {
                console.error("Error fetching data from Firestore:", error);
                showMessageBox(`Error loading data: ${error.message}`, true);
                loadingIndicator.classList.add('hidden');
            });
        }

        /**
         * Adds a new test entry to Firestore.
         * @param {Object} data - The test data to add.
         */
        async function addTestEntry(data) {
            try {
                if (!db || !userId) {
                    showMessageBox("Database not ready. Please wait for initialization.", true);
                    return;
                }
                loadingIndicator.classList.remove('hidden');
                const docRef = await addDoc(collection(db, `artifacts/${firebaseConfig.projectId}/users/${userId}/transformer_oil_tests`), data);
                console.log("Document written with ID: ", docRef.id);
                showMessageBox("Test entry saved successfully!");
                oilTestForm.reset(); // Clear form
                dataEntryModal.style.display = 'none'; // Hide modal
            } catch (e) {
                console.error("Error adding document: ", e);
                showMessageBox(`Error saving data: ${e.message}`, true);
            } finally {
                loadingIndicator.classList.add('hidden');
            }
        }

        /**
         * Deletes a test entry from Firestore.
         * @param {string} docId - The ID of the document to delete.
         */
        async function deleteTestEntry(docId) {
            try {
                if (!db || !userId) {
                    showMessageBox("Database not ready. Please wait for initialization.", true);
                    return;
                }
                loadingIndicator.classList.remove('hidden');
                await deleteDoc(doc(db, `artifacts/${firebaseConfig.projectId}/users/${userId}/transformer_oil_tests`, docId));
                console.log("Document successfully deleted!");
                showMessageBox("Entry deleted successfully!");
            } catch (e) {
                console.error("Error removing document: ", e);
                showMessageBox(`Error deleting data: ${e.message}`, true);
            } finally {
                loadingIndicator.classList.add('hidden');
            }
        }

        // --- UI Event Handlers ---

        newEntryBtn.addEventListener('click', () => {
            oilTestForm.reset(); // Clear form fields
            dataEntryModal.style.display = 'flex'; // Show the modal
        });

        closeButton.addEventListener('click', () => {
            dataEntryModal.style.display = 'none'; // Hide the modal
        });

        cancelEntryBtn.addEventListener('click', () => {
            dataEntryModal.style.display = 'none'; // Hide the modal
        });

        // Close modal if user clicks outside of it
        window.addEventListener('click', (event) => {
            if (event.target == dataEntryModal) {
                dataEntryModal.style.display = 'none';
            }
        });

        oilTestForm.addEventListener('submit', (event) => {
            event.preventDefault();
            const formData = new FormData(oilTestForm);
            const data = {};
            for (let [key, value] of formData.entries()) {
                // Convert numbers where appropriate
                if (!isNaN(parseFloat(value)) && isFinite(value) && key !== 'dateOfNextSample' && key !== 'colour' && key !== 'appearance' && key !== 'odour' && key !== 'fibres' && key !== 'turbidity' && key !== 'pcbsResult' && key !== 'recommendations') {
                    data[key] = parseFloat(value);
                } else {
                    data[key] = value;
                }
            }
            addTestEntry(data);
        });

        graphParamSelect.addEventListener('change', (event) => {
            drawChart(allTestData, event.target.value);
        });

        // --- New: Download Graph Functionality ---
        downloadGraphBtn.addEventListener('click', () => {
            const dataURL = oilTrendChartCanvas.toDataURL('image/png');
            const a = document.createElement('a');
            a.href = dataURL;
            a.download = `transformer_oil_trend_${graphParamSelect.value}_${new Date().toISOString().slice(0,10)}.png`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            showMessageBox("Graph downloaded successfully!");
        });

        // --- New: Search/Filter Functionality ---
        searchDataInput.addEventListener('input', filterAndDisplayData);
        clearSearchBtn.addEventListener('click', () => {
            searchDataInput.value = '';
            filterAndDisplayData();
        });

        /**
         * Filters the test data based on search input and displays it.
         */
        function filterAndDisplayData() {
            const searchTerm = searchDataInput.value.toLowerCase().trim();
            let filteredData = allTestData;

            if (searchTerm) {
                filteredData = allTestData.filter(entry => {
                    // Search in Asset No, Date of Test, Type (case-insensitive)
                    return (entry.assetNo && String(entry.assetNo).toLowerCase().includes(searchTerm)) ||
                           (entry.dateOfTest && String(entry.dateOfTest).toLowerCase().includes(searchTerm)) ||
                           (entry.type && String(entry.type).toLowerCase().includes(searchTerm));
                });
            }
            displayTestData(filteredData);
        }


        // --- Data Display ---

        /**
         * Displays the fetched test data in the list.
         * @param {Array<Object>} dataArray - Array of test data objects to display (can be filtered).
         */
        function displayTestData(dataArray) {
            dataList.innerHTML = ''; // Clear previous entries
            if (dataArray.length === 0) {
                noDataMessage.classList.remove('hidden');
            } else {
                noDataMessage.classList.add('hidden');
                dataArray.forEach(entry => {
                    const div = document.createElement('div');
                    div.className = 'data-list-item';
                    div.innerHTML = `
                        <span class="date">Date: ${entry.dateOfTest || 'N/A'}</span>
                        <span>Asset No: ${entry.assetNo || 'N/A'}</span>
                        <span>Dielectric Strength: ${entry.dielectricStrength !== undefined ? entry.dielectricStrength : 'N/A'} MV/m</span>
                        <span>Water Content: ${entry.waterContent !== undefined ? entry.waterContent : 'N/A'} mg/kg</span>
                        <span>Total DGA: ${entry.totalDissolvedGas !== undefined ? entry.totalDissolvedGas : 'N/A'} ppm</span>
                        <button class="bg-red-500 hover:bg-red-600 text-white font-bold py-1 px-3 rounded-lg shadow-md delete-btn" data-id="${entry.id}">Delete</button>
                    `;
                    dataList.appendChild(div);
                });

                // Add event listeners to delete buttons
                dataList.querySelectorAll('.delete-btn').forEach(button => {
                    button.addEventListener('click', (event) => {
                        const docId = event.target.dataset.id;
                        // Using a custom message box instead of confirm() for better UX
                        showConfirmationModal('Are you sure you want to delete this entry?', () => {
                            deleteTestEntry(docId);
                        });
                    });
                });
            }
        }

        // Custom Confirmation Modal (replaces browser's confirm())
        function showConfirmationModal(message, onConfirm) {
            const modalHtml = `
                <div id="confirmationModal" class="modal" style="display: flex;">
                    <div class="modal-content max-w-sm text-center p-8">
                        <p class="text-xl mb-6">${message}</p>
                        <div class="flex justify-center gap-4">
                            <button id="confirmYes" class="bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded-lg shadow-md">Yes</button>
                            <button id="confirmNo" class="bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded-lg shadow-md">No</button>
                        </div>
                    </div>
                </div>
            `;
            document.body.insertAdjacentHTML('beforeend', modalHtml);

            const confirmationModal = document.getElementById('confirmationModal');
            document.getElementById('confirmYes').onclick = () => {
                onConfirm();
                confirmationModal.remove();
            };
            document.getElementById('confirmNo').onclick = () => {
                confirmationModal.remove();
            };
            // Close if clicked outside
            confirmationModal.onclick = (event) => {
                if (event.target === confirmationModal) {
                    confirmationModal.remove();
                }
            };
        }


        // --- Canvas Drawing (Graphing) ---

        /**
         * Draws a line chart on the canvas.
         * @param {Array<Object>} data - The data to plot.
         * @param {string} parameter - The parameter to graph (e.g., 'dielectricStrength').
         */
        function drawChart(data, parameter) {
            // Clear canvas
            ctx.clearRect(0, 0, oilTrendChartCanvas.width, oilTrendChartCanvas.height);

            if (data.length === 0) {
                ctx.font = '16px Inter';
                ctx.textAlign = 'center';
                ctx.fillStyle = '#718096';
                ctx.fillText('No data to display. Add entries to see trends.', oilTrendChartCanvas.width / 2, oilTrendChartCanvas.height / 2);
                return;
            }

            const dates = data.map(entry => new Date(entry.dateOfTest));
            const values = data.map(entry => entry[parameter]).filter(val => val !== undefined && val !== null);

            if (values.length < 2) {
                ctx.font = '16px Inter';
                ctx.textAlign = 'center';
                ctx.fillStyle = '#718096';
                ctx.fillText('Need at least 2 data points for a trend graph.', oilTrendChartCanvas.width / 2, oilTrendChartCanvas.height / 2);
                return;
            }

            // Find min/max values for scaling
            const minValue = Math.min(...values);
            const maxValue = Math.max(...values);
            const valueRange = maxValue - minValue;

            // Canvas dimensions
            const canvasWidth = oilTrendChartCanvas.width;
            const canvasHeight = oilTrendChartCanvas.height;
            const padding = 50; // Padding for axes and labels

            // Calculate scales
            const xScale = (canvasWidth - 2 * padding) / (dates.length - 1);
            const yScale = (canvasHeight - 2 * padding) / (valueRange === 0 ? 1 : valueRange); // Avoid division by zero

            // Draw axes
            ctx.beginPath();
            ctx.strokeStyle = '#a0aec0'; // Gray for axes
            ctx.lineWidth = 2;

            // X-axis
            ctx.moveTo(padding, canvasHeight - padding);
            ctx.lineTo(canvasWidth - padding, canvasHeight - padding);
            // Y-axis
            ctx.moveTo(padding, canvasHeight - padding);
            ctx.lineTo(padding, padding);
            ctx.stroke();

            // Draw data points and lines
            ctx.beginPath();
            ctx.strokeStyle = '#4299e1'; // Blue for line
            ctx.lineWidth = 3;
            ctx.lineJoin = 'round';
            ctx.lineCap = 'round';

            data.forEach((entry, i) => {
                const date = new Date(entry.dateOfTest);
                const value = entry[parameter];

                if (value === undefined || value === null) return; // Skip if value is missing

                const x = padding + i * xScale;
                const y = canvasHeight - padding - (value - minValue) * yScale;

                if (i === 0) {
                    ctx.moveTo(x, y);
                } else {
                    ctx.lineTo(x, y);
                }

                // Draw circles for data points
                ctx.fillStyle = '#4299e1';
                ctx.beginPath();
                ctx.arc(x, y, 5, 0, Math.PI * 2);
                ctx.fill();
            });
            ctx.stroke();

            // Draw labels
            ctx.fillStyle = '#2d3748';
            ctx.font = '12px Inter';
            ctx.textAlign = 'center';

            // X-axis labels (Dates)
            const maxLabels = Math.floor((canvasWidth - 2 * padding) / 80); // Max labels to avoid overlap
            const labelInterval = Math.ceil(dates.length / maxLabels);

            dates.forEach((date, i) => {
                if (i % labelInterval === 0 || i === dates.length - 1) { // Always show last label
                    const x = padding + i * xScale;
                    ctx.fillText(date.toLocaleDateString(), x, canvasHeight - padding + 20);
                }
            });

            // Y-axis labels (Values)
            ctx.textAlign = 'right';
            const numYLabels = 5;
            for (let i = 0; i <= numYLabels; i++) {
                const yValue = minValue + (valueRange / numYLabels) * i;
                const y = canvasHeight - padding - (yValue - minValue) * yScale;
                ctx.fillText(yValue.toFixed(2), padding - 10, y + 4);
            }

            // Axis titles
            ctx.textAlign = 'center';
            ctx.font = '14px Inter';
            ctx.fillText('Date of Test', canvasWidth / 2, canvasHeight - 10);

            ctx.save();
            ctx.translate(padding / 2, canvasHeight / 2);
            ctx.rotate(-Math.PI / 2);
            ctx.fillText(parameter.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase()), 0, 0); // Format parameter name
            ctx.restore();
        }

        // Resize canvas and redraw on window resize
        function resizeCanvas() {
            oilTrendChartCanvas.width = oilTrendChartCanvas.offsetWidth;
            oilTrendChartCanvas.height = 400; // Keep height fixed or scale proportionally
            drawChart(allTestData, graphParamSelect.value);
        }

        window.addEventListener('resize', resizeCanvas);

        // --- Initial Setup ---
        window.onload = function() {
            initializeFirebase();
            resizeCanvas(); // Initial canvas resize and draw
        };
    </script>
</body>
</html>
